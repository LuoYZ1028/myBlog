<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>我的博客</title>
        <link>http://LuoYZ1028.github.io/myBlog</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Tue, 11 Oct 2022 09:23:56 +0800</pubDate>
        <lastBuildDate>Tue, 11 Oct 2022 09:23:56 +0800</lastBuildDate>
        <category>LoongArch</category>
        <category>软件开发</category>
        <category>汇编器</category>
        <category>risc-v</category>
        <category>单周期CPU</category>
        <category>流水线CPU</category>
        <item>
            <guid isPermalink="true">http://luoyz1028.github.io/myBlog/2022/10/11/LoongArch32%E4%BD%8D%E6%B1%87%E7%BC%96%E5%99%A8%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/</guid>
            <title>LoongArch32位汇编器使用文档</title>
            <link>http://luoyz1028.github.io/myBlog/2022/10/11/LoongArch32%E4%BD%8D%E6%B1%87%E7%BC%96%E5%99%A8%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/</link>
            <pubDate>Tue, 11 Oct 2022 09:23:56 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;基础内容&#34;&gt;&lt;a href=&#34;#基础内容&#34; class=&#34;headerlink&#34; title=&#34;基础内容&#34;&gt;&lt;/a&gt;基础内容&lt;/h1&gt;&lt;h2 id=&#34;代码输入-提示信息&#34;&gt;&lt;a href=&#34;#代码输入-提示信息&#34; class=&#34;headerlink&#34; title=&#34;代码输入+提示信息&#34;&gt;&lt;/a&gt;代码输入+提示信息&lt;/h2&gt;&lt;p&gt;在Edit窗口即可输入汇编代码，注意代码高亮提示，如果指令名输完后没有高亮，多半就是指令有误了；&lt;/p&gt;
&lt;img src=&#34;/myBlog/2022/10/11/LoongArch32%E4%BD%8D%E6%B1%87%E7%BC%96%E5%99%A8%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/%E4%BB%A3%E7%A0%81%E5%8C%BA01.png&#34; class=&#34;&#34;&gt;

&lt;p&gt;出现错误时，会自动跳转到错误行且行高亮色变为暗红色，改正后再次点击Build按钮或按F5，行高亮色变为暗绿色。&lt;/p&gt;
&lt;img src=&#34;/myBlog/2022/10/11/LoongArch32%E4%BD%8D%E6%B1%87%E7%BC%96%E5%99%A8%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/%E4%BB%A3%E7%A0%81%E5%8C%BA02.png&#34; class=&#34;&#34;&gt;

&lt;h2 id=&#34;结果预览&#34;&gt;&lt;a href=&#34;#结果预览&#34; class=&#34;headerlink&#34; title=&#34;结果预览&#34;&gt;&lt;/a&gt;结果预览&lt;/h2&gt;&lt;p&gt;当汇编无语法错误时，可以切换到Result窗口，查看当前指令对应的汇编结果和数据变量的存储情况&lt;/p&gt;
&lt;img src=&#34;/myBlog/2022/10/11/LoongArch32%E4%BD%8D%E6%B1%87%E7%BC%96%E5%99%A8%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/%E7%BB%93%E6%9E%9C%E9%A2%84%E8%A7%88.png&#34; class=&#34;&#34;&gt;

&lt;h2 id=&#34;功能按钮&#34;&gt;&lt;a href=&#34;#功能按钮&#34; class=&#34;headerlink&#34; title=&#34;功能按钮&#34;&gt;&lt;/a&gt;功能按钮&lt;/h2&gt;&lt;p&gt;鼠标移动到工具按钮上可显示信息（有对应快捷键时也会进行显示），同理，顶部功能选卡也是如此&lt;/p&gt;
&lt;h1 id=&#34;Debug教程&#34;&gt;&lt;a href=&#34;#Debug教程&#34; class=&#34;headerlink&#34; title=&#34;Debug教程&#34;&gt;&lt;/a&gt;Debug教程&lt;/h1&gt;&lt;h3 id=&#34;单步执行&#34;&gt;&lt;a href=&#34;#单步执行&#34; class=&#34;headerlink&#34; title=&#34;单步执行&#34;&gt;&lt;/a&gt;单步执行&lt;/h3&gt;&lt;p&gt;快捷键为F11&lt;/p&gt;
&lt;img src=&#34;/myBlog/2022/10/11/LoongArch32%E4%BD%8D%E6%B1%87%E7%BC%96%E5%99%A8%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/Debug_step.png&#34; class=&#34;&#34;&gt;

&lt;h3 id=&#34;手动重置&#34;&gt;&lt;a href=&#34;#手动重置&#34; class=&#34;headerlink&#34; title=&#34;手动重置&#34;&gt;&lt;/a&gt;手动重置&lt;/h3&gt;&lt;p&gt;建议遇到问题时，手动点击重置按钮，或快键键F10&lt;/p&gt;
&lt;h3 id=&#34;设置断点&#34;&gt;&lt;a href=&#34;#设置断点&#34; class=&#34;headerlink&#34; title=&#34;设置断点&#34;&gt;&lt;/a&gt;设置断点&lt;/h3&gt;&lt;p&gt;注意断点需要勾选后面的enable框才会真的生效！&lt;/p&gt;
&lt;img src=&#34;/myBlog/2022/10/11/LoongArch32%E4%BD%8D%E6%B1%87%E7%BC%96%E5%99%A8%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/Debug_bp.png&#34; class=&#34;&#34;&gt;

&lt;h3 id=&#34;手动修改内存内容&#34;&gt;&lt;a href=&#34;#手动修改内存内容&#34; class=&#34;headerlink&#34; title=&#34;手动修改内存内容&#34;&gt;&lt;/a&gt;手动修改内存内容&lt;/h3&gt;&lt;p&gt;可以通过View按钮跳转到对应地址的内存地址查看其中内容，然后通过Set按钮将内容框中的数据写入该内存地址中&lt;/p&gt;
&lt;img src=&#34;/myBlog/2022/10/11/LoongArch32%E4%BD%8D%E6%B1%87%E7%BC%96%E5%99%A8%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/Debug_mem1.png&#34; class=&#34;&#34;&gt;

&lt;img src=&#34;/myBlog/2022/10/11/LoongArch32%E4%BD%8D%E6%B1%87%E7%BC%96%E5%99%A8%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/Debug_mem2.png&#34; class=&#34;&#34;&gt;

&lt;h3 id=&#34;手动跳转&#34;&gt;&lt;a href=&#34;#手动跳转&#34; class=&#34;headerlink&#34; title=&#34;手动跳转&#34;&gt;&lt;/a&gt;手动跳转&lt;/h3&gt;&lt;p&gt;通过写入合法PC值，点击set PC按钮，就能够强制跳转到该地址（或者说，当set PC按下后，再次Step，就能执行该PC值对应的指令了）&lt;/p&gt;
&lt;img src=&#34;/myBlog/2022/10/11/LoongArch32%E4%BD%8D%E6%B1%87%E7%BC%96%E5%99%A8%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/Debug_set.png&#34; class=&#34;&#34;&gt;

&lt;h1 id=&#34;汇编语法示例&#34;&gt;&lt;a href=&#34;#汇编语法示例&#34; class=&#34;headerlink&#34; title=&#34;汇编语法示例&#34;&gt;&lt;/a&gt;汇编语法示例&lt;/h1&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs ASM&#34;&gt;/*&lt;br&gt;	some &lt;br&gt;	annotation &lt;br&gt;	here&lt;br&gt;*/&lt;br&gt;TEST0 macro X&lt;br&gt;addi.w $a0, X, 0x10&lt;br&gt;xor X, X, X&lt;br&gt;endm&lt;br&gt;&lt;br&gt;TEST1 macro Y &lt;br&gt;slli.w Y, $a2, 0x3&lt;br&gt;pcaddu12i Y, 13&lt;br&gt;and Y, Y, Y&lt;br&gt;endm&lt;br&gt;&lt;br&gt;.data&lt;br&gt;&lt;br&gt;string: .asciz &amp;quot;Hello World!\r\n&amp;quot;&lt;br&gt;array:  .word 48, 49, 50, 51, 52&lt;br&gt;buffer: .space 3&lt;br&gt;NUM0	EQU	0x20&lt;br&gt;&lt;br&gt;.text&lt;br&gt;&lt;br&gt;.origin 0x00001000&lt;br&gt;&lt;br&gt;main:&lt;br&gt;	li.w $t2, 0x30 /*&lt;br&gt;		more&lt;br&gt;		annotation&lt;br&gt;		here&lt;br&gt;	*/ li.w $t2, 0x30&lt;br&gt;    li.w $t2, 0x30		# li.w test&lt;br&gt;	la $t3, array		# la test&lt;br&gt;	addi.w $t1, $t1, NUM0		# const define test&lt;br&gt;	TEST0 $s1	# macro test&lt;br&gt;	TEST1 $s2	# macro test&lt;br&gt;    lu12i.w $a7, 0x80000    	 # a relatively large number&lt;br&gt;    addi.w $a7, $a7, 1&lt;br&gt;    addi.w $a0, $a0, 1024&lt;br&gt;    mulh.w $a3, $a7, $a0&lt;br&gt;    beq $a7, $a7, main		        # dead loop&lt;br&gt;    st.w $a7, $t0, 0&lt;br&gt;    st.b $a0, $t0, 0xc&lt;br&gt;    xor $a7, $a7, $a7&lt;br&gt;    xor $a0, $a0, $a0&lt;br&gt;    addi.w $a7, $a7, 93             # exit syscall number&lt;br&gt;    addi.w $a0, $a0, 0&lt;br&gt;    syscall 0x0                     # syscall&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://luoyz1028.github.io/myBlog/2022/10/08/LoongArch32%E4%BD%8D%E6%B1%87%E7%BC%96%E5%99%A8%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/</guid>
            <title>LoongArch32位汇编器开发（一）</title>
            <link>http://luoyz1028.github.io/myBlog/2022/10/08/LoongArch32%E4%BD%8D%E6%B1%87%E7%BC%96%E5%99%A8%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/</link>
            <category>LoongArch</category>
            <category>软件开发</category>
            <category>汇编器</category>
            <pubDate>Sat, 08 Oct 2022 20:42:41 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;开发流程&#34;&gt;&lt;a href=&#34;#开发流程&#34; class=&#34;headerlink&#34; title=&#34;开发流程&#34;&gt;&lt;/a&gt;开发流程&lt;/h1&gt;&lt;h2 id=&#34;写在前面&#34;&gt;&lt;a href=&#34;#写在前面&#34; class=&#34;headerlink&#34; title=&#34;写在前面&#34;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;该软件是2022年秋季课程《软件设计与实践B》中，我所在小组决定的课题“基于LoongArch32位CPU设计”，其下的一个子任务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基础目标是拥有一个可视化界面的“翻译软件”，能够按顺序翻译汇编语言，支持所有32位基础整数指令集即可，同时要分别支持指令序列和数据变量的分别翻译，最好要能够使用文件读入和写出&lt;/li&gt;
&lt;li&gt;若能实现更多功能，会视情况得到加分&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;计划技术路线&#34;&gt;&lt;a href=&#34;#计划技术路线&#34; class=&#34;headerlink&#34; title=&#34;计划技术路线&#34;&gt;&lt;/a&gt;计划技术路线&lt;/h2&gt;&lt;p&gt;采用Qt作为前端开发平台，Qt基于C++，用偏向系统的语言进行软件开发不至于到时候答辩被老师低看一眼……&lt;br&gt;Qt能够提供一个设计师面板，在这个界面中，可以通过拖拽可视化的窗口控件，来直接生成界面，也正是这一功能，让我的开发过程中摆脱了大量篇幅（1000+行代码）的空间、布局定义和初始化，集中精力专注于后端逻辑。&lt;/p&gt;
&lt;p&gt;C++和C最大的不同，就是前者面向对象，后者面向过程，且前者能提供大量的字符串处理函数，包括QString数据类型，这都能大幅降低开发难度，&lt;br&gt;因为Qt的可视化控件，比如一个QTextBrowser想要显示一些内容，传入的参数类型就是QString类型，所以我设想了一下，觉得如果整体采用QString数据类型存储指令序列，应该能更有效地达成目的。&lt;/p&gt;
&lt;h2 id=&#34;工期安排&#34;&gt;&lt;a href=&#34;#工期安排&#34; class=&#34;headerlink&#34; title=&#34;工期安排&#34;&gt;&lt;/a&gt;工期安排&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;周数&lt;/th&gt;
&lt;th&gt;工作安排&lt;/th&gt;
&lt;th&gt;是否完成&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;完成基本翻译功能和最基本的代码输入窗口+结果输出窗口（用于检查翻译是否正确）&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;完成代码段和数据段分治处理，能完成文件读取和写入，将结果输出窗口废弃，改为处理信息输出窗口&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;进行界面美化，将代码翻译结果显示在新的窗口中，增加代码检错机制（不能要求用户代码写得尽善尽美），同时增加错误提示机制&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;增加Debug功能，同时增加语法高亮（能高亮关键词，对用户写代码时起到一定的提示作用），将工具栏填入功能按钮，添加一系列Icon美化图标&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;完善错误检测机制（大部分能遇见的错误类型都能予以提醒，且发现错误时高亮颜色改变，自动跳转到错误行进行高亮），增加多行注释的支持，增加两个伪指令li.w和la，同时支持EQU宏定义&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;增加快捷键，增加弹出式提示窗口，将代码输入窗口改为修改敏感，即一旦修改就认为当前内容尚未汇编，若此时用户跳转到结果视察或debug窗口，将会强制返回代码编辑窗口并弹出窗口进行提示；增加代码鲁棒性，将绝大部分类中关键变量设为私有成员，添加对应接口函数&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;支持宏展开macro的定义和使用，添加相应语法高亮，对代码编辑区增加行号支持，更方便用户使用，添加版权信息，添加用户文档&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://luoyz1028.github.io/myBlog/2022/10/06/RISC-V%E6%B5%81%E6%B0%B4%E7%BA%BFCPU%EF%BC%88%E4%BA%8C%EF%BC%89/</guid>
            <title>RISC-V流水线CPU（二）</title>
            <link>http://luoyz1028.github.io/myBlog/2022/10/06/RISC-V%E6%B5%81%E6%B0%B4%E7%BA%BFCPU%EF%BC%88%E4%BA%8C%EF%BC%89/</link>
            <category>risc-v</category>
            <category>流水线CPU</category>
            <pubDate>Thu, 06 Oct 2022 19:54:43 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前文传送门&#34;&gt;&lt;a href=&#34;#前文传送门&#34; class=&#34;headerlink&#34; title=&#34;前文传送门&#34;&gt;&lt;/a&gt;前文传送门&lt;/h1&gt;&lt;a href=&#34;/myBlog/2022/10/06/RISC-V%E6%B5%81%E6%B0%B4%E7%BA%BFCPU/&#34; title=&#34;RISC-V流水线CPU（一）&#34;&gt;第一章&lt;/a&gt;

&lt;h2 id=&#34;数据冒险（续）&#34;&gt;&lt;a href=&#34;#数据冒险（续）&#34; class=&#34;headerlink&#34; title=&#34;数据冒险（续）&#34;&gt;&lt;/a&gt;数据冒险（续）&lt;/h2&gt;&lt;h3 id=&#34;load-use型&#34;&gt;&lt;a href=&#34;#load-use型&#34; class=&#34;headerlink&#34; title=&#34;load-use型&#34;&gt;&lt;/a&gt;load-use型&lt;/h3&gt;&lt;p&gt;前面三种数据冒险都能通过前递（forwarding）数据来得以解决，免除了暂停流水线的苦恼，靶特，凡事总有例外，前递并非万用药，load-use型数据冒险就难以使用前递解决，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs ASM&#34;&gt;ld x2, 0(x0)    # 从内存0地址取数放入x2&lt;br&gt;addi x2, x2, 1  # x2增1&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;load-use，顾名思义，就是取出即用，前面ld指令紧跟着要使用ld的目的寄存器的指令；我们分析一下时序关系，ld什么时候能取出数据？MEM阶段完成时，那么addi什么时候需要用这个数据？EXE阶段开始时；&lt;/p&gt;
&lt;p&gt;显然，二者差了整整一个时钟周期！&lt;/p&gt;
&lt;p&gt;除非强行破坏我们目前的严格5段流水线，在前面阶段就允许访存，否则，面对load-use数据冒险，我们只能委曲求全，插入一个空指令，或者说，让流水线暂停1个周期，然后再数据前递&lt;/p&gt;
&lt;h3 id=&#34;暂停流水线&#34;&gt;&lt;a href=&#34;#暂停流水线&#34; class=&#34;headerlink&#34; title=&#34;暂停流水线&#34;&gt;&lt;/a&gt;暂停流水线&lt;/h3&gt;&lt;p&gt;按理说，面对数据冒险，应该第一反应是想直接暂停流水线的，有冒险，那就等一等、停一停，等到它不再有冒险了，再继续流动；&lt;/p&gt;
&lt;p&gt;这种朴素地解决方案的确存在，但没有多大的实际价值，毕竟已经掌握数据前递的我们不难看出，如果一遇到数据冒险就暂停流水线，那对于指令吞吐量而言将是多大的损失啊！这种“鸵鸟”策略在本设计中并不可取。&lt;/p&gt;
&lt;p&gt;但是对于上述的load-use型冒险，在不破坏严格5段流水分工的前提下，这种暂停手段就成了我们&lt;strong&gt;折中&lt;/strong&gt;的策略&lt;/p&gt;
&lt;p&gt;显然我们需要一个&lt;strong&gt;异步&lt;/strong&gt;检测信号，这个信号要能够使得流水寄存器暂停一个周期——具体而言就是让发生load-use的那一周期中，让&lt;strong&gt;IF&lt;/strong&gt;和&lt;strong&gt;ID&lt;/strong&gt;流水寄存器当前周期的输出和下一个周期的输出保持一致，让&lt;strong&gt;EXE&lt;/strong&gt;流水寄存器下周期输出清空，这样后续指令就相当于被&lt;strong&gt;卡&lt;/strong&gt;了一个周期，谓之暂停。&lt;/p&gt;
&lt;h2 id=&#34;控制冒险&#34;&gt;&lt;a href=&#34;#控制冒险&#34; class=&#34;headerlink&#34; title=&#34;控制冒险&#34;&gt;&lt;/a&gt;控制冒险&lt;/h2&gt;&lt;p&gt;也叫做“分支冒险”，我们认为：程序的&lt;strong&gt;控制流&lt;/strong&gt;就像一条工业生产线，不断地有新指令流入，旧指令流出，这是指令执行序列的常态，但是生产向也并非总是按照固定的顺序流动的，最典型的&lt;em&gt;if-else&lt;/em&gt;语句，就可能产生分支，令控制流转到另一个特定的位置；&lt;/p&gt;
&lt;p&gt;&lt;em&gt;if-else&lt;/em&gt;语句无疑是编程语言的一大家，但&lt;em&gt;if-else&lt;/em&gt;对流水线并不友好，理由是显而易见的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跳转指令，除了无条件跳转，都只有在执行到&lt;strong&gt;EXE&lt;/strong&gt;阶段时，才能确定是否真的要跳转&lt;/li&gt;
&lt;li&gt;如果真的需要跳转，那么我们目前的流水线就可能已流入两条错误的指令（分别处于IF和ID阶段），还需要考虑如何handle这两条错误指令引发的&lt;strong&gt;蝴蝶效应&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;此外，如何更新PC值也是我们需要考虑的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;暂停流水线-插入气泡&#34;&gt;&lt;a href=&#34;#暂停流水线-插入气泡&#34; class=&#34;headerlink&#34; title=&#34;暂停流水线+插入气泡&#34;&gt;&lt;/a&gt;暂停流水线+插入气泡&lt;/h3&gt;&lt;p&gt;为了能正确地清理掉流入的两条错误指令，我们可以参考暂停流水线的做法，同时向流水寄存器中插入气泡&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;em&gt;暂停流水线&lt;/em&gt;和&lt;em&gt;插入气泡&lt;/em&gt;是两个概念，前者是让流水寄存器两个周期内输出相同的数据，后者则是让流水寄存器下个周期的输出为“全0”或空&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为我们执行到条件分支指令的EXE阶段才能直到是否需要跳转，所以我们要向&lt;strong&gt;ID，IF&lt;/strong&gt;流水寄存器插入气泡，以起到清空错误指令的效果，同时拉高分支信号，告诉PC和NPC模块我们下一步应该如何更新PC值&lt;/p&gt;
&lt;h3 id=&#34;分支预测&#34;&gt;&lt;a href=&#34;#分支预测&#34; class=&#34;headerlink&#34; title=&#34;分支预测&#34;&gt;&lt;/a&gt;分支预测&lt;/h3&gt;&lt;p&gt;可见，即便难如load-use冒险都只需要损失一个时钟周期，而分支指令可能一次性带来两个时钟周期的损失！为优化性能，我们提出了分支预测这一概念。&lt;/p&gt;
&lt;p&gt;为简单起见，我们不考虑通过设置分支预测表来对每一种分支指令都进行预测，而是笼统地设计一个全局分支预测状态机，状态机的状态决定了我们猜测它是跳还是不跳。&lt;/p&gt;
&lt;p&gt;根据状态机的设计原理，大致可分出两类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;静态预测，典型的有：AJ（永远跳转）,AN（永远不跳转）,BTFNT（往前跳，往后不跳）&lt;/li&gt;
&lt;li&gt;动态预测，最实用的是2bit的状态码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于静态预测准确率不高且实现简单，我们不做过多讨论，主要看动态预测的2bit状态机原理图：&lt;/p&gt;
&lt;img src=&#34;/myBlog/2022/10/06/RISC-V%E6%B5%81%E6%B0%B4%E7%BA%BFCPU%EF%BC%88%E4%BA%8C%EF%BC%89/%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%8E%9F%E7%90%86.png&#34; class=&#34;&#34; title=&#34;分支预测原理&#34;&gt;&lt;sup id=&#34;fnref:1&#34; class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn:1&#34; rel=&#34;footnote&#34;&gt;&lt;span class=&#34;hint--top hint--rounded&#34; aria-label=&#34;看不懂也没关系，应该不影响理解原理……吧&#34;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;

&lt;p&gt;状态码定义为：初值为0，当其值大于 1 时将预测跳转，否侧预测不跳转；&lt;br&gt;我们可以通过枚举法列出动态分支预测的四种情况来进行分析，即：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预测&lt;em&gt;跳转&lt;/em&gt;，实际也&lt;em&gt;跳转&lt;/em&gt;（情况 1，预测成功）&lt;/li&gt;
&lt;li&gt;预测&lt;em&gt;不跳转&lt;/em&gt;，实际也不&lt;em&gt;跳转&lt;/em&gt;（情况 2，预测成功）&lt;/li&gt;
&lt;li&gt;预测&lt;em&gt;跳转&lt;/em&gt;，但实际&lt;em&gt;不跳转&lt;/em&gt;（情况 3，预测失败）&lt;/li&gt;
&lt;li&gt;预测&lt;em&gt;不跳转&lt;/em&gt;，但实际&lt;em&gt;跳转&lt;/em&gt;（情况 4，预测失败）&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;前两种情况为&lt;strong&gt;预测成功&lt;/strong&gt;，则需要正向修正状态码&lt;ul&gt;
&lt;li&gt;情况1：状态码+1，为什么？因为大于1表示预测跳转，而现在预测跳转对了，自然要鼓励下一次偏向预测跳转&lt;/li&gt;
&lt;li&gt;情况2：状态码-1，为什么？因为小于等于1表示预测不跳转，现在预测不跳转对了，自然要鼓励下一次偏向预测不跳转&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;后两种情况则为&lt;strong&gt;预测失败&lt;/strong&gt;，需要反向修正状态码&lt;ul&gt;
&lt;li&gt;情况3：状态码-1，为什么？因为小于等于1表示预测不跳转，现在预测跳转错了，应该鼓励下一次偏向预测不跳转&lt;/li&gt;
&lt;li&gt;情况4：状态码+1，为什么？因为大于1表示预测跳转，而现在预测不跳转错了，应该鼓励下一次偏向预测跳转&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;解决了数据冒险和控制冒险后，加上本来采用哈佛结构就能避免冯·诺依曼结构的结构冒险，CPU三大冒险都已解决，流水线CPU就宣告完成了&lt;/p&gt;
&lt;hr&gt;
&lt;section class=&#34;footnotes&#34;&gt;&lt;div class=&#34;footnote-list&#34;&gt;&lt;ol&gt;&lt;li&gt;&lt;span id=&#34;fn:1&#34; class=&#34;footnote-text&#34;&gt;&lt;span&gt;看不懂也没关系，应该不影响理解原理……吧
&lt;a href=&#34;#fnref:1&#34; rev=&#34;footnote&#34; class=&#34;footnote-backref&#34;&gt; ↩&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/section&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://luoyz1028.github.io/myBlog/2022/10/06/RISC-V%E6%B5%81%E6%B0%B4%E7%BA%BFCPU/</guid>
            <title>RISC-V流水线CPU（一）</title>
            <link>http://luoyz1028.github.io/myBlog/2022/10/06/RISC-V%E6%B5%81%E6%B0%B4%E7%BA%BFCPU/</link>
            <category>risc-v</category>
            <category>流水线CPU</category>
            <pubDate>Thu, 06 Oct 2022 10:56:19 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;写在前面&#34;&gt;&lt;a href=&#34;#写在前面&#34; class=&#34;headerlink&#34; title=&#34;写在前面&#34;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/paticita/article/details/119570971&#34;&gt;CSDN相应博客页&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;里面详细说明了这个项目的来龙去脉，同时对项目的关键点进行了简单的描述，建议结合项目代码进行阅读&lt;/p&gt;
&lt;h1 id=&#34;内容摘要&#34;&gt;&lt;a href=&#34;#内容摘要&#34; class=&#34;headerlink&#34; title=&#34;内容摘要&#34;&gt;&lt;/a&gt;内容摘要&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;将单周期中已有的分段处理思想进一步实现，通过&lt;strong&gt;流水线寄存器&lt;/strong&gt;能够让指令延后一个周期进行传输来划分阶段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;完成基本流水线划分后得到的是理想流水线模型，之所以谓之“理想”，是因为这个模型对于存在冲突的指令序列不能正确运行。&lt;/p&gt;
&lt;h1 id=&#34;流水线整体框架&#34;&gt;&lt;a href=&#34;#流水线整体框架&#34; class=&#34;headerlink&#34; title=&#34;流水线整体框架&#34;&gt;&lt;/a&gt;流水线整体框架&lt;/h1&gt;&lt;img src=&#34;/myBlog/2022/10/06/RISC-V%E6%B5%81%E6%B0%B4%E7%BA%BFCPU/%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%BB%93%E6%9E%84.png&#34; class=&#34;&#34; title=&#34;流水线结构&#34;&gt;&lt;sup id=&#34;fnref:1&#34; class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn:1&#34; rel=&#34;footnote&#34;&gt;&lt;span class=&#34;hint--top hint--rounded&#34; aria-label=&#34;有一处纰漏：“IF/EXE”应改为“ID/EXE”&#34;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;
&lt;blockquote&gt;
&lt;p&gt;见脚注1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;解决流水线存在的冲突&#34;&gt;&lt;a href=&#34;#解决流水线存在的冲突&#34; class=&#34;headerlink&#34; title=&#34;解决流水线存在的冲突&#34;&gt;&lt;/a&gt;解决流水线存在的冲突&lt;/h1&gt;&lt;h2 id=&#34;数据冒险&#34;&gt;&lt;a href=&#34;#数据冒险&#34; class=&#34;headerlink&#34; title=&#34;数据冒险&#34;&gt;&lt;/a&gt;数据冒险&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;数据冒险指的是前后两条指令存在&lt;strong&gt;数据相关&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即前一条指令产生的数据，将被后一条指令使用，可能是以下情形之一：&lt;/p&gt;
&lt;img src=&#34;/myBlog/2022/10/06/RISC-V%E6%B5%81%E6%B0%B4%E7%BA%BFCPU/%E6%95%B0%E6%8D%AE%E5%86%B2%E7%AA%81.png&#34; class=&#34;&#34; title=&#34;数据冲突&#34;&gt;&lt;sup id=&#34;fnref:2&#34; class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn:2&#34; rel=&#34;footnote&#34;&gt;&lt;span class=&#34;hint--top hint--rounded&#34; aria-label=&#34;同色表示两条指令之间存在该阶段的数据冲突&#34;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;
&lt;blockquote&gt;
&lt;p&gt;见脚注2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们来分情况讨论一下：&lt;/p&gt;
&lt;h3 id=&#34;A类数据冒险&#34;&gt;&lt;a href=&#34;#A类数据冒险&#34; class=&#34;headerlink&#34; title=&#34;A类数据冒险&#34;&gt;&lt;/a&gt;A类数据冒险&lt;/h3&gt;&lt;p&gt;前一条指令的&lt;strong&gt;访存&lt;/strong&gt;阶段和后一条的&lt;strong&gt;执行&lt;/strong&gt;阶段冲突，什么意思呢？例如&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs ASM&#34;&gt;li x2, 1        # 把1赋给x2寄存器&lt;br&gt;add x2, x2, x2  # x2寄存器自己加自己&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此刻，当指令 $li\ x2, 1$ 执行到&lt;strong&gt;MEM&lt;/strong&gt;阶段时，后一条指令 $add\ x2,\ x2,\ x2$ 进入&lt;strong&gt;EXE&lt;/strong&gt;阶段，发现需要取寄存器x2的值，但如果真的就简单地访问取数，就出现了不一致现象(&lt;em&gt;流水线和单周期行为不一致&lt;/em&gt;)，因为我们需要的是更新后x2&amp;#x3D;1的值，但在流水线中，只有当第一条指令转入WB阶段时才会更新x2为1，此前其一直为0；&lt;/p&gt;
&lt;p&gt;所以，我们需要设计&lt;strong&gt;前递单元&lt;/strong&gt;(forwarding unit)和&lt;strong&gt;数据冲突检测单元&lt;/strong&gt;(hazard detection unit)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前递：将&lt;em&gt;尚未写回&lt;/em&gt;的数据&lt;em&gt;提前&lt;/em&gt;送到前面的单元里，以保证数据的有效性&lt;/li&gt;
&lt;li&gt;数据冲突检测：每个时钟周期都对CPU执行的指令进行检测，若发现出现数据冲突，则拉高相应的信号forward_a，使得&lt;em&gt;流水线寄存器&lt;/em&gt;得知&lt;em&gt;是否该接收&lt;/em&gt;前递单元的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在A类情形中，我们需要将&lt;strong&gt;MEM&lt;/strong&gt;阶段的ALU运算结果&lt;strong&gt;前递&lt;/strong&gt;到&lt;em&gt;ID&amp;#x2F;EXE流水线寄存器&lt;/em&gt;内，这样下一个周期中，后一条指令的ALU操作数就是更新过的结果，而非直接取出的数值&lt;/p&gt;
&lt;h3 id=&#34;B类数据冒险&#34;&gt;&lt;a href=&#34;#B类数据冒险&#34; class=&#34;headerlink&#34; title=&#34;B类数据冒险&#34;&gt;&lt;/a&gt;B类数据冒险&lt;/h3&gt;&lt;p&gt;涉及连续的3条指令，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs ASM&#34;&gt;li x2, 1    #把1赋给x2寄存器&lt;br&gt;xor x3, x3, x3  #清空x3寄存器&lt;br&gt;add x2, x2, x2  #x2寄存器自己加自己&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;和A类的不同在于发生冲突的两条指令间&lt;strong&gt;夹着&lt;/strong&gt;一条指令，即冲突发生在第1条指令的&lt;strong&gt;WB&lt;/strong&gt;阶段和第3条指令的&lt;strong&gt;EXE&lt;/strong&gt;阶段&lt;/p&gt;
&lt;p&gt;仿照A类的处理方式，将WB阶段的数据前递给ID&amp;#x2F;EXE流水寄存器即可，同样，处理信号需要在&lt;strong&gt;数据冲突检测单元&lt;/strong&gt;(hazard detection unit)中确定值，可以令设一个新的前递信号forward_b&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;思考：当同时存在A，B类型时应该怎么办？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs ASM&#34;&gt;li x2, 1        # 把1赋给x2寄存器&lt;br&gt;add x2, x2, x2  # x2寄存器自己加自己&lt;br&gt;addi x3, x2, 0  # 同时存在AB两类冲突&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;显然我们需要的是最新的数据（&lt;em&gt;newest first原理&lt;/em&gt;），即我们可以得出结论：A类数据冲突优先级比B类更高&lt;/p&gt;
&lt;h3 id=&#34;C类数据冒险&#34;&gt;&lt;a href=&#34;#C类数据冒险&#34; class=&#34;headerlink&#34; title=&#34;C类数据冒险&#34;&gt;&lt;/a&gt;C类数据冒险&lt;/h3&gt;&lt;p&gt;这回是发生冲突的两条指令间夹了两条指令，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs ASM&#34;&gt;li x2, 1        # 把1赋给x2寄存器&lt;br&gt;add x1, x1, x1  # x1寄存器自己加自己&lt;br&gt;addi x3, x4, 0&lt;br&gt;addi x2, x2, 1  # C类数据冒险&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可能会问：明明第1条指令已经到WB阶段了，为什么还会发生冲突呢？&lt;/p&gt;
&lt;p&gt;答案是：为了提升主频，我们的寄存器堆采用的是在同一个时钟周期内，上升沿写入，下降沿读取，然而流水线寄存器的流入值也是在上升沿……&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说人话就是&lt;/strong&gt;，在同一个周期里，寄存器堆虽然能读出新值，但旧值已经流入ID&amp;#x2F;EXE流水寄存器里了，因此还是需要前递单元操作一下的&lt;/p&gt;
&lt;h3 id=&#34;load-use型数据冒险&#34;&gt;&lt;a href=&#34;#load-use型数据冒险&#34; class=&#34;headerlink&#34; title=&#34;load-use型数据冒险&#34;&gt;&lt;/a&gt;load-use型数据冒险&lt;/h3&gt;&lt;p&gt;请见后续章节&lt;/p&gt;
&lt;a href=&#34;/myBlog/2022/10/06/RISC-V%E6%B5%81%E6%B0%B4%E7%BA%BFCPU%EF%BC%88%E4%BA%8C%EF%BC%89/&#34; title=&#34;RISC-V流水线CPU（二）&#34;&gt;第二章&lt;/a&gt;

&lt;hr&gt;
&lt;section class=&#34;footnotes&#34;&gt;&lt;div class=&#34;footnote-list&#34;&gt;&lt;ol&gt;&lt;li&gt;&lt;span id=&#34;fn:1&#34; class=&#34;footnote-text&#34;&gt;&lt;span&gt;有一处纰漏：“IF&amp;#x2F;EXE”应改为“ID&amp;#x2F;EXE”
&lt;a href=&#34;#fnref:1&#34; rev=&#34;footnote&#34; class=&#34;footnote-backref&#34;&gt; ↩&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span id=&#34;fn:2&#34; class=&#34;footnote-text&#34;&gt;&lt;span&gt;同色表示两条指令之间存在该阶段的数据冲突
&lt;a href=&#34;#fnref:2&#34; rev=&#34;footnote&#34; class=&#34;footnote-backref&#34;&gt; ↩&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/section&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://luoyz1028.github.io/myBlog/2022/10/05/RISC-V%E5%8D%95%E5%91%A8%E6%9C%9FCPU/</guid>
            <title>RISC-V单周期CPU</title>
            <link>http://luoyz1028.github.io/myBlog/2022/10/05/RISC-V%E5%8D%95%E5%91%A8%E6%9C%9FCPU/</link>
            <category>risc-v</category>
            <category>单周期CPU</category>
            <pubDate>Wed, 05 Oct 2022 20:00:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;写在前面&#34;&gt;&lt;a href=&#34;#写在前面&#34; class=&#34;headerlink&#34; title=&#34;写在前面&#34;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/paticita/article/details/119508499&#34;&gt;CSDN相关博客页&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;里面详细说明了这个项目的来龙去脉，同时对项目的关键点进行了简单的描述，建议结合项目代码进行阅读&lt;/p&gt;
&lt;h1 id=&#34;内容摘要&#34;&gt;&lt;a href=&#34;#内容摘要&#34; class=&#34;headerlink&#34; title=&#34;内容摘要&#34;&gt;&lt;/a&gt;内容摘要&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用Verilog语言，配合Vivado软件进行硬件设计，并最终能生成比特流导入板子进行实际效果模拟&lt;/li&gt;
&lt;li&gt;指令集架构基于risc-v，32位基础整数指令，没有特权指令或是内核态，也不存在中断操作&lt;/li&gt;
&lt;li&gt;该部分是单周期模型，所有指令都限定在一个周期内进行5个阶段：取指$\to$译码$\to$执行$\to$访存$\to$写回，因此整体时延超大，主频难以提升&lt;ul&gt;
&lt;li&gt;但这并不意味单周期模型就是废物，相反，单周期模型能够证明我们设计的合理性&lt;/li&gt;
&lt;li&gt;此外单周期模型提供5段流水的思想，能够大幅度减少流水线CPU的设计难度&lt;/li&gt;
&lt;li&gt;忽视单周期模型的设计很可能会导致流水线的Bug多如牛毛，不过单周期确实没有多大的实际应用意义&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
