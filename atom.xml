<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://LuoYZ1028.github.io/myBlog</id>
    <title>我的博客</title>
    <link href="http://LuoYZ1028.github.io/myBlog" />
    <updated>2022-10-06T11:54:43.000Z</updated>
    <category term="risc-v" />
    <category term="单周期CPU" />
    <category term="流水线CPU" />
    <entry>
        <id>http://luoyz1028.github.io/myBlog/2022/10/06/RISC-V%E6%B5%81%E6%B0%B4%E7%BA%BFCPU%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
        <title>RISC-V流水线CPU（二）</title>
        <link rel="alternate" href="http://luoyz1028.github.io/myBlog/2022/10/06/RISC-V%E6%B5%81%E6%B0%B4%E7%BA%BFCPU%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
        <content type="html">&lt;h1 id=&#34;前文传送门&#34;&gt;&lt;a href=&#34;#前文传送门&#34; class=&#34;headerlink&#34; title=&#34;前文传送门&#34;&gt;&lt;/a&gt;前文传送门&lt;/h1&gt;&lt;a href=&#34;/myBlog/2022/10/06/RISC-V%E6%B5%81%E6%B0%B4%E7%BA%BFCPU/&#34; title=&#34;RISC-V流水线CPU（一）&#34;&gt;第一章&lt;/a&gt;

&lt;h2 id=&#34;数据冒险（续）&#34;&gt;&lt;a href=&#34;#数据冒险（续）&#34; class=&#34;headerlink&#34; title=&#34;数据冒险（续）&#34;&gt;&lt;/a&gt;数据冒险（续）&lt;/h2&gt;&lt;h3 id=&#34;load-use型&#34;&gt;&lt;a href=&#34;#load-use型&#34; class=&#34;headerlink&#34; title=&#34;load-use型&#34;&gt;&lt;/a&gt;load-use型&lt;/h3&gt;&lt;p&gt;前面三种数据冒险都能通过前递（forwarding）数据来得以解决，免除了暂停流水线的苦恼，靶特，凡事总有例外，前递并非万用药，load-use型数据冒险就难以使用前递解决，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs ASM&#34;&gt;ld x2, 0(x0)    # 从内存0地址取数放入x2&lt;br&gt;addi x2, x2, 1  # x2增1&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;load-use，顾名思义，就是取出即用，前面ld指令紧跟着要使用ld的目的寄存器的指令；我们分析一下时序关系，ld什么时候能取出数据？MEM阶段完成时，那么addi什么时候需要用这个数据？EXE阶段开始时；&lt;/p&gt;
&lt;p&gt;显然，二者差了整整一个时钟周期！&lt;/p&gt;
&lt;p&gt;除非强行破坏我们目前的严格5段流水线，在前面阶段就允许访存，否则，面对load-use数据冒险，我们只能委曲求全，插入一个空指令，或者说，让流水线暂停1个周期，然后再数据前递&lt;/p&gt;
&lt;h3 id=&#34;暂停流水线&#34;&gt;&lt;a href=&#34;#暂停流水线&#34; class=&#34;headerlink&#34; title=&#34;暂停流水线&#34;&gt;&lt;/a&gt;暂停流水线&lt;/h3&gt;&lt;p&gt;按理说，面对数据冒险，应该第一反应是想直接暂停流水线的，有冒险，那就等一等、停一停，等到它不再有冒险了，再继续流动；&lt;/p&gt;
&lt;p&gt;这种朴素地解决方案的确存在，但没有多大的实际价值，毕竟已经掌握数据前递的我们不难看出，如果一遇到数据冒险就暂停流水线，那对于指令吞吐量而言将是多大的损失啊！这种“鸵鸟”策略在本设计中并不可取。&lt;/p&gt;
&lt;p&gt;但是对于上述的load-use型冒险，在不破坏严格5段流水分工的前提下，这种暂停手段就成了我们&lt;strong&gt;折中&lt;/strong&gt;的策略&lt;/p&gt;
&lt;p&gt;显然我们需要一个&lt;strong&gt;异步&lt;/strong&gt;检测信号，这个信号要能够使得流水寄存器暂停一个周期——具体而言就是让发生load-use的那一周期中，让&lt;strong&gt;IF&lt;/strong&gt;和&lt;strong&gt;ID&lt;/strong&gt;流水寄存器当前周期的输出和下一个周期的输出保持一致，让&lt;strong&gt;EXE&lt;/strong&gt;流水寄存器下周期输出清空，这样后续指令就相当于被&lt;strong&gt;卡&lt;/strong&gt;了一个周期，谓之暂停。&lt;/p&gt;
&lt;h2 id=&#34;控制冒险&#34;&gt;&lt;a href=&#34;#控制冒险&#34; class=&#34;headerlink&#34; title=&#34;控制冒险&#34;&gt;&lt;/a&gt;控制冒险&lt;/h2&gt;&lt;p&gt;也叫做“分支冒险”，我们认为：程序的&lt;strong&gt;控制流&lt;/strong&gt;就像一条工业生产线，不断地有新指令流入，旧指令流出，这是指令执行序列的常态，但是生产向也并非总是按照固定的顺序流动的，最典型的&lt;em&gt;if-else&lt;/em&gt;语句，就可能产生分支，令控制流转到另一个特定的位置；&lt;/p&gt;
&lt;p&gt;&lt;em&gt;if-else&lt;/em&gt;语句无疑是编程语言的一大家，但&lt;em&gt;if-else&lt;/em&gt;对流水线并不友好，理由是显而易见的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跳转指令，除了无条件跳转，都只有在执行到&lt;strong&gt;EXE&lt;/strong&gt;阶段时，才能确定是否真的要跳转&lt;/li&gt;
&lt;li&gt;如果真的需要跳转，那么我们目前的流水线就可能已流入两条错误的指令（分别处于IF和ID阶段），还需要考虑如何清空这两条错误指令引发的&lt;strong&gt;蝴蝶效应&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;此外，如何选择&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="risc-v" />
        <category term="流水线CPU" />
        <updated>2022-10-06T11:54:43.000Z</updated>
    </entry>
    <entry>
        <id>http://luoyz1028.github.io/myBlog/2022/10/06/RISC-V%E6%B5%81%E6%B0%B4%E7%BA%BFCPU/</id>
        <title>RISC-V流水线CPU（一）</title>
        <link rel="alternate" href="http://luoyz1028.github.io/myBlog/2022/10/06/RISC-V%E6%B5%81%E6%B0%B4%E7%BA%BFCPU/"/>
        <content type="html">&lt;h1 id=&#34;写在前面&#34;&gt;&lt;a href=&#34;#写在前面&#34; class=&#34;headerlink&#34; title=&#34;写在前面&#34;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/paticita/article/details/119570971&#34;&gt;CSDN相应博客页&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;里面详细说明了这个项目的来龙去脉，同时对项目的关键点进行了简单的描述，建议结合项目代码进行阅读&lt;/p&gt;
&lt;h1 id=&#34;内容摘要&#34;&gt;&lt;a href=&#34;#内容摘要&#34; class=&#34;headerlink&#34; title=&#34;内容摘要&#34;&gt;&lt;/a&gt;内容摘要&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;将单周期中已有的分段处理思想进一步实现，通过&lt;strong&gt;流水线寄存器&lt;/strong&gt;能够让指令延后一个周期进行传输来划分阶段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;完成基本流水线划分后得到的是理想流水线模型，之所以谓之“理想”，是因为这个模型对于存在冲突的指令序列不能正确运行。&lt;/p&gt;
&lt;h1 id=&#34;流水线整体框架&#34;&gt;&lt;a href=&#34;#流水线整体框架&#34; class=&#34;headerlink&#34; title=&#34;流水线整体框架&#34;&gt;&lt;/a&gt;流水线整体框架&lt;/h1&gt;&lt;img src=&#34;/myBlog/2022/10/06/RISC-V%E6%B5%81%E6%B0%B4%E7%BA%BFCPU/%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%BB%93%E6%9E%84.png&#34; class=&#34;&#34; title=&#34;流水线结构&#34;&gt;&lt;sup id=&#34;fnref:1&#34; class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn:1&#34; rel=&#34;footnote&#34;&gt;&lt;span class=&#34;hint--top hint--rounded&#34; aria-label=&#34;有一处纰漏：“IF/EXE”应改为“ID/EXE”&#34;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;
&lt;blockquote&gt;
&lt;p&gt;见脚注1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;解决流水线存在的冲突&#34;&gt;&lt;a href=&#34;#解决流水线存在的冲突&#34; class=&#34;headerlink&#34; title=&#34;解决流水线存在的冲突&#34;&gt;&lt;/a&gt;解决流水线存在的冲突&lt;/h1&gt;&lt;h2 id=&#34;数据冒险&#34;&gt;&lt;a href=&#34;#数据冒险&#34; class=&#34;headerlink&#34; title=&#34;数据冒险&#34;&gt;&lt;/a&gt;数据冒险&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;数据冒险指的是前后两条指令存在&lt;strong&gt;数据相关&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即前一条指令产生的数据，将被后一条指令使用，可能是以下情形之一：&lt;/p&gt;
&lt;img src=&#34;/myBlog/2022/10/06/RISC-V%E6%B5%81%E6%B0%B4%E7%BA%BFCPU/%E6%95%B0%E6%8D%AE%E5%86%B2%E7%AA%81.png&#34; class=&#34;&#34; title=&#34;数据冲突&#34;&gt;&lt;sup id=&#34;fnref:2&#34; class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn:2&#34; rel=&#34;footnote&#34;&gt;&lt;span class=&#34;hint--top hint--rounded&#34; aria-label=&#34;同色表示两条指令之间存在该阶段的数据冲突&#34;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;
&lt;blockquote&gt;
&lt;p&gt;见脚注2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们来分情况讨论一下：&lt;/p&gt;
&lt;h3 id=&#34;A类数据冒险&#34;&gt;&lt;a href=&#34;#A类数据冒险&#34; class=&#34;headerlink&#34; title=&#34;A类数据冒险&#34;&gt;&lt;/a&gt;A类数据冒险&lt;/h3&gt;&lt;p&gt;前一条指令的&lt;strong&gt;访存&lt;/strong&gt;阶段和后一条的&lt;strong&gt;执行&lt;/strong&gt;阶段冲突，什么意思呢？例如&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs ASM&#34;&gt;li x2, 1        # 把1赋给x2寄存器&lt;br&gt;add x2, x2, x2  # x2寄存器自己加自己&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此刻，当指令 $li\ x2, 1$ 执行到&lt;strong&gt;MEM&lt;/strong&gt;阶段时，后一条指令 $add\ x2,\ x2,\ x2$ 进入&lt;strong&gt;EXE&lt;/strong&gt;阶段，发现需要取寄存器x2的值，但如果真的就简单地访问取数，就出现了不一致现象(&lt;em&gt;流水线和单周期行为不一致&lt;/em&gt;)，因为我们需要的是更新后x2&amp;#x3D;1的值，但在流水线中，只有当第一条指令转入WB阶段时才会更新x2为1，此前其一直为0；&lt;/p&gt;
&lt;p&gt;所以，我们需要设计&lt;strong&gt;前递单元&lt;/strong&gt;(forwarding unit)和&lt;strong&gt;数据冲突检测单元&lt;/strong&gt;(hazard detection unit)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前递：将&lt;em&gt;尚未写回&lt;/em&gt;的数据&lt;em&gt;提前&lt;/em&gt;送到前面的单元里，以保证数据的有效性&lt;/li&gt;
&lt;li&gt;数据冲突检测：每个时钟周期都对CPU执行的指令进行检测，若发现出现数据冲突，则拉高相应的信号forward_a，使得&lt;em&gt;流水线寄存器&lt;/em&gt;得知&lt;em&gt;是否该接收&lt;/em&gt;前递单元的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在A类情形中，我们需要将&lt;strong&gt;MEM&lt;/strong&gt;阶段的ALU运算结果&lt;strong&gt;前递&lt;/strong&gt;到&lt;em&gt;ID&amp;#x2F;EXE流水线寄存器&lt;/em&gt;内，这样下一个周期中，后一条指令的ALU操作数就是更新过的结果，而非直接取出的数值&lt;/p&gt;
&lt;h3 id=&#34;B类数据冒险&#34;&gt;&lt;a href=&#34;#B类数据冒险&#34; class=&#34;headerlink&#34; title=&#34;B类数据冒险&#34;&gt;&lt;/a&gt;B类数据冒险&lt;/h3&gt;&lt;p&gt;涉及连续的3条指令，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs ASM&#34;&gt;li x2, 1    #把1赋给x2寄存器&lt;br&gt;xor x3, x3, x3  #清空x3寄存器&lt;br&gt;add x2, x2, x2  #x2寄存器自己加自己&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;和A类的不同在于发生冲突的两条指令间&lt;strong&gt;夹着&lt;/strong&gt;一条指令，即冲突发生在第1条指令的&lt;strong&gt;WB&lt;/strong&gt;阶段和第3条指令的&lt;strong&gt;EXE&lt;/strong&gt;阶段&lt;/p&gt;
&lt;p&gt;仿照A类的处理方式，将WB阶段的数据前递给ID&amp;#x2F;EXE流水寄存器即可，同样，处理信号需要在&lt;strong&gt;数据冲突检测单元&lt;/strong&gt;(hazard detection unit)中确定值，可以令设一个新的前递信号forward_b&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;思考：当同时存在A，B类型时应该怎么办？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs ASM&#34;&gt;li x2, 1        # 把1赋给x2寄存器&lt;br&gt;add x2, x2, x2  # x2寄存器自己加自己&lt;br&gt;addi x3, x2, 0  # 同时存在AB两类冲突&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;显然我们需要的是最新的数据（&lt;em&gt;newest first原理&lt;/em&gt;），即我们可以得出结论：A类数据冲突优先级比B类更高&lt;/p&gt;
&lt;h3 id=&#34;C类数据冒险&#34;&gt;&lt;a href=&#34;#C类数据冒险&#34; class=&#34;headerlink&#34; title=&#34;C类数据冒险&#34;&gt;&lt;/a&gt;C类数据冒险&lt;/h3&gt;&lt;p&gt;这回是发生冲突的两条指令间夹了两条指令，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs ASM&#34;&gt;li x2, 1        # 把1赋给x2寄存器&lt;br&gt;add x1, x1, x1  # x1寄存器自己加自己&lt;br&gt;addi x3, x4, 0&lt;br&gt;addi x2, x2, 1  # C类数据冒险&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可能会问：明明第1条指令已经到WB阶段了，为什么还会发生冲突呢？&lt;/p&gt;
&lt;p&gt;答案是：为了提升主频，我们的寄存器堆采用的是在同一个时钟周期内，上升沿写入，下降沿读取，然而流水线寄存器的流入值也是在上升沿……&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说人话就是&lt;/strong&gt;，在同一个周期里，寄存器堆虽然能读出新值，但旧值已经流入ID&amp;#x2F;EXE流水寄存器里了，因此还是需要前递单元操作一下的&lt;/p&gt;
&lt;h3 id=&#34;load-use型数据冒险&#34;&gt;&lt;a href=&#34;#load-use型数据冒险&#34; class=&#34;headerlink&#34; title=&#34;load-use型数据冒险&#34;&gt;&lt;/a&gt;load-use型数据冒险&lt;/h3&gt;&lt;p&gt;请见后续章节&lt;/p&gt;
&lt;a href=&#34;/myBlog/2022/10/06/RISC-V%E6%B5%81%E6%B0%B4%E7%BA%BFCPU%EF%BC%88%E4%BA%8C%EF%BC%89/&#34; title=&#34;RISC-V流水线CPU（二）&#34;&gt;第二章&lt;/a&gt;

&lt;hr&gt;
&lt;section class=&#34;footnotes&#34;&gt;&lt;div class=&#34;footnote-list&#34;&gt;&lt;ol&gt;&lt;li&gt;&lt;span id=&#34;fn:1&#34; class=&#34;footnote-text&#34;&gt;&lt;span&gt;有一处纰漏：“IF&amp;#x2F;EXE”应改为“ID&amp;#x2F;EXE”
&lt;a href=&#34;#fnref:1&#34; rev=&#34;footnote&#34; class=&#34;footnote-backref&#34;&gt; ↩&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span id=&#34;fn:2&#34; class=&#34;footnote-text&#34;&gt;&lt;span&gt;同色表示两条指令之间存在该阶段的数据冲突
&lt;a href=&#34;#fnref:2&#34; rev=&#34;footnote&#34; class=&#34;footnote-backref&#34;&gt; ↩&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/section&gt;</content>
        <category term="risc-v" />
        <category term="流水线CPU" />
        <updated>2022-10-06T02:56:19.000Z</updated>
    </entry>
    <entry>
        <id>http://luoyz1028.github.io/myBlog/2022/10/05/RISC-V%E5%8D%95%E5%91%A8%E6%9C%9FCPU/</id>
        <title>RISC-V单周期CPU</title>
        <link rel="alternate" href="http://luoyz1028.github.io/myBlog/2022/10/05/RISC-V%E5%8D%95%E5%91%A8%E6%9C%9FCPU/"/>
        <content type="html">&lt;h1 id=&#34;写在前面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#写在前面&#34;&gt;#&lt;/a&gt; 写在前面&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/paticita/article/details/119508499&#34;&gt;CSDN 相关博客页&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;里面详细说明了这个项目的来龙去脉，同时对项目的关键点进行了简单的描述，建议结合项目代码进行阅读&lt;/p&gt;
&lt;h1 id=&#34;内容摘要&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#内容摘要&#34;&gt;#&lt;/a&gt; 内容摘要&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;使用 Verilog 语言，配合 Vivado 软件进行硬件设计，并最终能生成比特流导入板子进行实际效果模拟&lt;/li&gt;
&lt;li&gt;指令集架构基于 risc-v，32 位基础整数指令，没有特权指令或是内核态，也不存在中断操作&lt;/li&gt;
&lt;li&gt;该部分是单周期模型，所有指令都限定在一个周期内进行 5 个阶段：取指&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\to&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.36687em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 译码&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\to&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.36687em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 执行&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\to&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.36687em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 访存&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\to&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.36687em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 写回，因此整体时延超大，主频难以提升
&lt;ul&gt;
&lt;li&gt;但这并不意味单周期模型就是废物，相反，单周期模型能够证明我们设计的合理性&lt;/li&gt;
&lt;li&gt;此外单周期模型提供 5 段流水的思想，能够大幅度减少流水线 CPU 的设计难度&lt;/li&gt;
&lt;li&gt;忽视单周期模型的设计很可能会导致流水线的 Bug 多如牛毛，不过单周期确实没有多大的实际应用意义&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="risc-v" />
        <category term="单周期CPU" />
        <updated>2022-10-05T12:00:21.000Z</updated>
    </entry>
    <entry>
        <id>http://luoyz1028.github.io/myBlog/2022/10/05/hello-world/</id>
        <title>Hello Hexo World</title>
        <link rel="alternate" href="http://luoyz1028.github.io/myBlog/2022/10/05/hello-world/"/>
        <content type="html">&lt;p&gt;Welcome to &lt;a href=&#34;https://hexo.io/&#34;&gt;Hexo&lt;/a&gt; World! This is your very first post. Check &lt;a href=&#34;https://hexo.io/docs/&#34;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&#34;https://hexo.io/docs/troubleshooting.html&#34;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/hexojs/hexo/issues&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
        <updated>2022-10-05T01:57:44.858Z</updated>
    </entry>
</feed>
